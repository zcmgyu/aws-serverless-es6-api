openapi: 3.0.0
# Added by API Auto Mocking Plugin
servers:
  - description: Dockyard run smartphone application API
    url: 'localhost:8080/v1'
info:
  description: |
    This is a Dockyard run smartphone application API. You can find
    out more about Dockyard at
    [https://www.dockyard.biz](https://www.dockyard.biz)
  version: 1.0.0
  title: Dockyard run smartphone application API
  termsOfService: ''
  contact:
    email: a@humancrest.co.jp
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
tags:
  - name: companies
    description: Every thing about company
  - name: projects
    description: Every thing about projects of company
  - name: store
    description: Access to Petstore orders
  - name: user
    description: Operations about user
paths:
  /companies:
    post:
      tags:
        - companies
      summary: Create new company
      operationId: createCompany
      requestBody:
        content:
          $ref: '#/components/requestBodies/Company'
      security:
        - OAuth2:
          - admin
  /projects:
    post:
      tags:
        - projects
      summary: Create new project
      operationId: createProject
      responses:
        '405':
          description: Invalid input
      security:
        - OAuth2:
          - 'write'
      requestBody:
        $ref: '#/components/requestBodies/Project'
  /projects/{id}:
    put:
      tags:
        - projects
      summary: Update an existing project
      operationId: updateProject
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: Project not found
        '405':
          description: Validation exception
      security:
        - OAuth2:
            - 'write'
      requestBody:
        $ref: '#/components/requestBodies/Pet'
  /projects/findByStatus:
    get:
      tags:
        - projects
      summary: Finds Pets by status
      description: Multiple status values can be provided with comma separated strings
      operationId: findPetsByStatus
      parameters:
        - name: status
          in: query
          description: Status values that need to be considered for filter
          required: true
          explode: true
          schema:
            type: array
            items:
              type: string
              enum:
                - available
                - pending
                - sold
              default: available
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pet'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pet'
        '400':
          description: Invalid status value
      security:
        - petstore_auth:
            - 'write:pets'
            - 'read:pets'
  '/projects/{petId}':
    get:
      tags:
        - projects
      summary: Find pet by ID
      description: Returns a single pet
      operationId: getPetById
      parameters:
        - name: petId
          in: path
          description: ID of pet to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
            application/xml:
              schema:
                $ref: '#/components/schemas/Pet'
        '400':
          description: Invalid ID supplied
        '404':
          description: Pet not found
      security:
        - api_key: []
    post:
      tags:
        - pet
      summary: Updates a pet in the store with form data
      operationId: updatePetWithForm
      parameters:
        - name: petId
          in: path
          description: ID of pet that needs to be updated
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '405':
          description: Invalid input
      security:
        - petstore_auth:
            - 'write:pets'
            - 'read:pets'
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                name:
                  description: Updated name of the pet
                  type: string
                status:
                  description: Updated status of the pet
                  type: string
    delete:
      tags:
        - pet
      summary: Deletes a pet
      operationId: deletePet
      parameters:
        - name: api_key
          in: header
          required: false
          schema:
            type: string
        - name: petId
          in: path
          description: Pet id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: Pet not found
      security:
        - petstore_auth:
            - 'write:pets'
            - 'read:pets'
  '/pet/{petId}/uploadImage':
    post:
      tags:
        - pet
      summary: uploads an image
      operationId: uploadFile
      parameters:
        - name: petId
          in: path
          description: ID of pet to update
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
      security:
        - OAuth2:
            - 'write'
            - 'read'
      requestBody:
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
  /store/inventory:
    get:
      tags:
        - store
      summary: Returns pet inventories by status
      description: Returns a map of status codes to quantities
      operationId: getInventory
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: integer
                  format: int32
      security:
        - api_key: []
  /store/order:
    post:
      tags:
        - store
      summary: Place an order for a pet
      operationId: placeOrder
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
            application/xml:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Invalid Order
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
        description: order placed for purchasing the pet
        required: true
  '/store/order/{orderId}':
    get:
      tags:
        - store
      summary: Find purchase order by ID
      description: >-
        For valid response try integer IDs with value >= 1 and <= 10.\ \ Other
        values will generated exceptions
      operationId: getOrderById
      parameters:
        - name: orderId
          in: path
          description: ID of pet that needs to be fetched
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
            maximum: 10
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
            application/xml:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Invalid ID supplied
        '404':
          description: Order not found
    delete:
      tags:
        - store
      summary: Delete purchase order by ID
      description: >-
        For valid response try integer IDs with positive integer value.\ \
        Negative or non-integer values will generate API errors
      operationId: deleteOrder
      parameters:
        - name: orderId
          in: path
          description: ID of the order that needs to be deleted
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: Order not found
  /user:
    post:
      tags:
        - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      responses:
        default:
          description: successful operation
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        description: Created user object
        required: true
  /user/createWithArray:
    post:
      tags:
        - user
      summary: Creates list of users with given input array
      operationId: createUsersWithArrayInput
      responses:
        default:
          description: successful operation
      requestBody:
        $ref: '#/components/requestBodies/UserArray'
  /user/createWithList:
    post:
      tags:
        - user
      summary: Creates list of users with given input array
      operationId: createUsersWithListInput
      responses:
        default:
          description: successful operation
      requestBody:
        $ref: '#/components/requestBodies/UserArray'
  /user/login:
    get:
      tags:
        - user
      summary: Logs user into the system
      operationId: loginUser
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: true
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/json:
              schema:
                type: string
            application/xml:
              schema:
                type: string
        '400':
          description: Invalid username/password supplied
  /user/logout:
    get:
      tags:
        - user
      summary: Logs out current logged in user session
      operationId: logoutUser
      responses:
        default:
          description: successful operation
  '/user/{username}':
    get:
      tags:
        - user
      summary: Get user by user name
      operationId: getUserByName
      parameters:
        - name: username
          in: path
          description: The name that needs to be fetched. Use user1 for testing.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
    put:
      tags:
        - user
      summary: Updated user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - name: username
          in: path
          description: name that need to be updated
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid user supplied
        '404':
          description: User not found
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        description: Updated user object
        required: true
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - name: username
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
externalDocs:
  description: Find out more about Swagger
  url: 'http://swagger.io'
components:
  schemas:
    Test:
      type: object
      properties:
        id:
          type: integer
          format: int64
        thing:
          type: string
    Project_User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        user_name:
          type: string
        prj_id:
          type: integer
          format: int64
        role_flg:
          type: integer
          enum: [0, 1, 2] # 0: admin, 1: write, 2: read
    Project:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        companyId:
          type: integer
          format: int64
      required:
        - id
        - companyId
      xml: Project
    Capabilities:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        appPath:
          type: string
        platformName:
          type: string
        platformVersion:
          type: string
        deviceName:
          type: string
        appiumVersion:
          type: string
        projectId:
          type: integer
          format: int64
        companyId:
          type: integer
          format: int64
      required:
          - id
          - projectId
          - companyId
      xml: Capabilities
    Screen:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        pageSource:
          type: string
        screenshot:
          type: string
        capabilitiesId:
          type: integer
          format: int64
        projectId:
          type: integer
          format: int64
        companyId:
          type: integer
          format: int64
      required:
        - id
        - projectId
        - capabilitiesId
        - companyId
      xml:
        name: Screen
    Element:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        screenshot:
          type: string
        screenId:
          type: integer
          format: int64
      required:
        - id
        - screenId
      xml:
        name: Element
    Attribute:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        value:
          type: string
        elementId:
          type: integer
          format: int64
      required:
        - id
        - elementId
      xml:
        name: Attribute
    ScreenStatement:
      type: object
      properties:
        screenId:
          type: integer
          format: int64
        statementId:
          type: integer
          format: int64
        type:
          type: string
          description: screen type
          enum:
            - contain
            - destination
      required:
        - screenId
        - statementId
      xml:
        name: ScreenStatement
    Statement:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        type:
          type: string
          description: statement type
          enum:
            - OK
            - NG
      required:
        - id
      xml:
        name: Statement
    Action:
      type: object
      properties:
        id:
          type: integer
          format: int64
        methodId:
          type: integer
          format: int64
        statementId:
          type: integer
          format: int64
        elementId:
          type: integer
          format: int64
        screenId:
          type: integer
          format: int64
        seq:
          type: integer
          format: int32
        data:
          type: string
      required:
        - id
        - methodId
        - statementId
      xml:
        name: Action
    Method:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        appiumMethod:
          type: string
      required:
        - id
      xml:
        name: Method
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
  requestBodies:
    Company:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Company'
          example:    # Child of media type
            id: 10
            name: Human Crest
      description: Company object
      # required: true
    Project:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Project'
        application/xml:
          schema:
            $ref: '#/components/schemas/Project'
      description: Project object that needs to be added to the Company
      required: true
    Element:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Element'
        application/xml:
          schema:
            $ref: '#/components/schemas/Element'
      description: Element object that needs to be added to the Screen
      required: true
    # UserArray:
    #   content:
    #     application/json:
    #       schema:
    #         type: array
    #         items:
    #           $ref: '#/components/schemas/User'
    #   description: List of user object
    #   required: true
  securitySchemes:
    OAuth2:
      type: oauth2
      description: For more information, see https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-userpools-server-contract-reference.html
      flows:
        authorizationCode:
          authorizationUrl: https://dockyard-run-sp-app.auth.ap-northeast-1.amazoncognito.com/oauth2/authorize
          tokenUrl: https://dockyard-run-sp-app.auth.ap-northeast-1.amazoncognito.com/oauth2/token
          scopes:
            write: allows modifying resources
            read: allows reading resources
            admin: Grants access to admin operations

security:
  - UserSecurity: []